import cv2
import numpy as np
import functions

def main():
    # read img
    # image_path = 'center_shot.png'
    image_path = 'test_4.png'
    result_image_path = "only_crossline.png"
    capture_path = "captured_image.jpg"  # 이미지 저장할 이름
    

    save_point = []
    
    cap = cv2.VideoCapture(0)
    

    while True:

        ret, frame = cap.read()
        capture_image = cv2.imread(capture_path)

    # Extract red line endpoints from the captured image
        
        
        result_img = cv2.imread(result_image_path)
        rh, rw, _ = result_img.shape

        rw = rw//2
        rh = rh//2
        result_img = cv2.resize(result_img,(rw,rh))

        rw = rw//2
        rh = rh//2

        image = frame
        h,w,_ = image.shape
        w = w//2
        h = h//2
        colors = (255, 0, 0)

        # detecting red crossline
        crossline_img, angles, x1, y1, x2, y2 = functions.detect_red_cross_lines(image)
        cv2.imshow('red crossline img',crossline_img)

        # detecting green crossline
        crossline_img2, angles2 = functions.detect_green_cross_lines(image)
        cv2.imshow('green crossline img', crossline_img2)


        # result_cap_img = cv2.imread(capture_path)

        key = cv2.waitKey(1)
        if key == ord('q'):
            break
        if key == ord('c'):
            ret, frame = cap.read()
            save_point = [] #초기화
            capture_image = frame
            for angle in angles:
                if not any(int(angle) // 10 == int(existing_angle) // 10 for existing_angle in save_point):
                    save_point.append(angle)

            if len(save_point) >= 2:
                draw_angle = save_point[0]
                draw_angle2 = save_point[1]

                slope = np.tan(draw_angle * np.pi / 180.0)
                slope2 = np.tan(draw_angle2 * np.pi / 180.0)

                functions.draw_line_through_center(capture_image, slope)
                functions.draw_line_through_center(capture_image, slope2)
                
                h, w = capture_image.shape[:2]

                dy = y2 - y1
                dx = x2 - x1
                slope = dy / dx

                b = y1 - slope * x1
                y_intercept = int(b)

                print("y절편 : ", y_intercept)

                print("x : ", x1)
                print("y : ", y1)
                print("기울기 : ", slope)

                # start_point, end_point = functions.extract_red_line_endpoints(capture_image)
                
                # if start_point and end_point:
                #     x1, y1 = start_point
                #     x2, y2 = end_point
                #     print("Red Line Start Point (x1, y1):", x1, y1)
                #     print("Red Line End Point (x2, y2):", x2, y2)
                    
                cv2.namedWindow("result_cap")
                cv2.setMouseCallback("result_cap", mouse_handler)
                
               # Show the image with the blue point
                cv2.imshow("result_cap", capture_image)
 
                # Save the image with the blue point
                cv2.imwrite(capture_path, capture_image)
                
                

    cap.release()
    cv2.destroyAllWindows()



if __name__ == "__main__":
    main()
